#...............OrderTriggerHandler.................


public class OrderTriggerHandler {

    public static void validateOrderQuantity(List<HandsMen_Order__c> orderList) {

        for (HandsMen_Order__c order : orderList) {

            if (order.Status__c == 'Confirmed') {

                if (order.Quantity__c == null || order.Quantity__c <= 500) {

                    order.Quantity__c.addError('For Status "Confirmed", Quantity must be more than 500.');

                }

            } else if (order.Status__c == 'Pending') {

                if (order.Quantity__c == null || order.Quantity__c <= 200) {

                    order.Quantity__c.addError('For Status "Pending", Quantity must be more than 200.');

                }

            } else if (order.Status__c == 'Rejection') {

                if (order.Quantity__c == null || order.Quantity__c != 0) {

                    order.Quantity__c.addError('For Status "Rejection", Quantity must be 0.');

                }

            }

        }

        System.debug('All records validated successfully.');

    }

}








#.............................OrderTrigger.... along with HandsMen_Order__c (Object)......

trigger OrderTrigger on HandsMen_Order__c (before insert, before update) {

    if (Trigger.isBefore && (Trigger.isInsert || Trigger.isUpdate)) {

        OrderTriggerHandler.validateOrderQuantity(Trigger.new);

    }

}trigger OrderTrigger on HandsMen_Order__c (before insert, before update) {

    if (Trigger.isBefore && (Trigger.isInsert || Trigger.isUpdate)) {

        OrderTriggerHandler.validateOrderQuantity(Trigger.new);

    }

}





#......................InventoryBatchJobInventoryBatchJob.........


global class InventoryBatchJob implements Database.Batchable<SObject>, Schedulable {

global Database.QueryLocator start(Database.BatchableContext BC) {

return Database.getQueryLocator(

'SELECT Id, Stock_Quantity__c FROM Product__c WHERE Stock_Quantity__c < 10'

);

}

global void execute(Database.BatchableContext BC, List<SObject> records) {

List<HandsMen_Product__c> productsToUpdate = new List<HandsMen_Product__c>();

// Cast SObject list to Product__c list

for (SObject record : records) {

HandsMen_Product__c product = (HandsMen_Product__c) record;

product.Stock_Quantity__c += 50; // Restock logic

productsToUpdate.add(product);

}

if (!productsToUpdate.isEmpty()) {

try {

update productsToUpdate;

} catch (DmlException e) {

System.debug('Error updating inventory: ' + e.getMessage());

}

}

}

global void finish(Database.BatchableContext BC) {

System.debug('Inventory Sync Completed');

}

// Scheduler Method

global void execute(SchedulableContext SC) {

InventoryBatchJob batchJob = new InventoryBatchJob();

Database.executeBatch(batchJob, 200);

}
}
